global:
  clusterRouterBase: {{ cluster_subdomain }}
  host: {{ backstage_host }}
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-redhat-argocd
        disabled: false

      ## --- TECHDOCS_PLUGIN ---
      # - package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
      #   disabled: false
      # - package: ./dynamic-plugins/dist/backstage-plugin-techdocs
      #   disabled: false
      # - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-gitlab-dynamic
      #   disabled: false
      ## --- TECHDOCS_PLUGIN ---

      ## --- DYNAMIC_PLUGINS_IMPORT_COMPONENTS ---
      # - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-module-utils-dynamic
      #   disabled: false
      # - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
      #   disabled: false
      # - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab
      #   disabled: false
      ## --- DYNAMIC_PLUGINS_IMPORT_COMPONENTS ---

      ## --- RBAC ---
      # - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-rbac
      #   disabled: false
      ## --- RBAC ---

      ## --- ORCHESTRATOR PLUGIN ---
      # - disabled: false
      #   package: "@redhat/backstage-plugin-orchestrator-backend-dynamic@1.3.0"
      #   integrity: sha512-Th5vmwyhHyhURwQo28++PPHTvxGSFScSHPJyofIdE5gTAb87ncyfyBkipSDq7fwj4L8CQTXa4YP6A2EkHW1npg==
      #   pluginConfig:
      #     orchestrator:
      #       dataIndexService:
      #         url: http://{{ orchestrator_sonataflow_data_index_service }}
      # - disabled: false
      #   package: "@redhat/backstage-plugin-orchestrator@1.3.0"
      #   integrity: sha512-A/twx1SOOGDQjglLzOxQikKO0XOdPP1jh2lj9Y/92bLox8mT+eaZpub8YLwR2mb7LsUIUImg+U6VnKwoAV9ATA==
      #   pluginConfig:
      #     dynamicPlugins:
      #       frontend:
      #         janus-idp.backstage-plugin-orchestrator:
      #           appIcons:
      #             - importName: OrchestratorIcon
      #               module: OrchestratorPlugin
      #               name: orchestratorIcon
      #           dynamicRoutes:
      #             - importName: OrchestratorPage
      #               menuItem:
      #                 icon: orchestratorIcon
      #                 text: Orchestrator
      #               module: OrchestratorPlugin
      #               path: /orchestrator
      # - disabled: false
      #   package: "@redhat/plugin-notifications-dynamic@1.3.0"
      #   integrity: sha512-iYLgIy0YdP/CdTLol07Fncmo9n0J8PdIZseiwAyUt9RFJzKIXmoi2CpQLPKMx36lEgPYUlT0rFO81Ie2CSis4Q==
      #   pluginConfig:
      #     dynamicPlugins:
      #       frontend:
      #         redhat.plugin-notifications:
      #           dynamicRoutes:
      #             - importName: NotificationsPage
      #               menuItem:
      #                 config:
      #                   props:
      #                     titleCounterEnabled: true
      #                     webNotificationsEnabled: false
      #                 importName: NotificationsSidebarItem
      #               path: /notifications
      # - disabled: false
      #   package: "@redhat/plugin-signals-dynamic@1.3.0"
      #   integrity: sha512-+E8XeTXcG5oy+aNImGj/MY0dvEkP7XAsu4xuZjmAqOHyVfiIi0jnP/QDz8XMbD1IjCimbr/DMUZdjmzQiD0hSQ==
      #   pluginConfig:
      #     dynamicPlugins:
      #       frontend:
      #         redhat.plugin-signals: {}
      # - disabled: false
      #   package: "@redhat/plugin-notifications-backend-dynamic@1.3.0"
      #   integrity: sha512-Pw9Op/Q+1MctmLiVvQ3M+89tkbWkw8Lw0VfcwyGSMiHpK/Xql1TrSFtThtLlymRgeCSBgxHYhh3MUusNQX08VA==
      # - disabled: false
      #   package: "@redhat/plugin-signals-backend-dynamic@1.3.0"
      #   integrity: sha512-5Bl6C+idPXtquQxMZW+bjRMcOfFYcKxcGZZFv2ITkPVeY2zzxQnAz3vYHnbvKRSwlQxjIyRXY6YgITGHXWT0nw==
      ## --- ORCHESTRATOR PLUGIN ---

upstream:
  postgresql:
    auth:
      username: postgres
      database: backstage
      existingSecret: backstage-postgresql
      secretKeys:
        userPasswordKey: postgres-password
  backstage:
    extraEnvVarsSecrets:
      - gitlab-token
      - argocd-password
      - kubernetes-sa-token
      - oauth-client
      - backstage-orchestrator-token
    appConfig:
      ## --- APP TITLE ---
      # app:
      #   title: PE Developer Hub
      ## --- APP TITLE ---

      ## --- AUTHENTICATION --- 
      ## This is a development and testing authentication configuration
      auth:
        providers:
          guest:
            dangerouslyAllowOutsideDevelopment: true
      ## Configuration required to enable OpenID Connect authentication
      # auth:
      #   session:
      #     secret: ${BACKEND_SECRET}
      #   environment: production
      #   providers:
      #     oidc:
      #       production:
      #         prompt: auto
      #         metadataUrl: https://{{ keycloak_host }}/realms/{{ keycloak_realm }}/.well-known/openid-configuration
      #         clientId: ${OAUTH_CLIENT_ID}
      #         clientSecret: ${OAUTH_CLIENT_SECRET}
      #         signIn:
      #           resolvers:
      #             - resolver: preferredUsernameMatchingUserEntityName
      # signInPage: oidc
      ## --- AUTHENTICATION --- #

      backend:
        ## --- ORCHESTRATOR ---
        # auth:
        #   externalAccess:
        #     - type: static
        #       options:
        #         token: ${ORCHESTRATOR_TOKEN}
        #         subject: orchestrator
        # csp:
        #   script-src: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
        #   script-src-elem: ["'self'", "'unsafe-inline'", "'unsafe-eval'"]
        #   connect-src: ["'self'", 'http:', 'https:', 'data:']
        # cors:
        #   origin: https://{{ backstage_host }}
        # database:
        #   client: pg
        #   connection:
        #     host: "${POSTGRES_HOST}"
        #     port: "${POSTGRES_PORT}"
        #     user: "${POSTGRES_USER}"
        #     password: "${POSTGRES_PASSWORD}"
        ## --- ORCHESTRATOR ---
        listen:
          port: 7007
          host: 0.0.0.0        

      integrations:
        gitlab:
          - apiBaseUrl: https://{{ gitlab_host }}/api/v4
            baseUrl: https://{{ gitlab_host }}
            host: {{ gitlab_host }}
            token: ${GITLAB_TOKEN}          
      catalog:
        rules:
          - allow: [Component, System, API, Resource, Location, Template, Domain]
        locations: []
        providers:
          
          ## --- GITLAB_CATALOG_PROVIDER ---
          # gitlab:
          #   default:
          #     host: gitlab-gitlab.{{ cluster_subdomain }}
          #     branch: main
          #     fallbackBranch: master
          #     skipForkedRepos: true
          #     entityFilename: catalog-info.yaml
          #     projectPattern: \w*techdocs\w*
          #     schedule:
          #       frequency: { minutes: 2 }
          #       timeout: { minutes: 3 }
          #       initialDelay: { seconds: 15 }
          ## --- GITLAB_CATALOG_PROVIDER ---

          ## --- AUTO_DISCOVERY_IMPORT_COMPONENTS ---
          #   all-location-entity:
          #     host: gitlab-gitlab.{{ cluster_subdomain }}
          #     filters:
          #       branch: main
          #     skipForkedRepos: true
          #     entityFilename: all-location.yaml
          #     catalogPath: /**/all-location.yaml
          #     projectPattern: \b(all-location\w*)
          #     excludeRepos: []
          #     schedule:
          #       frequency:
          #         seconds: 15
          #       initialDelay:
          #         seconds: 15
          #       timeout:
          #         minutes: 3
          ## --- AUTO_DISCOVERY_IMPORT_COMPONENTS ---

          ## --- KEYCLOAK_CATALOG_PROVIDERS ---
          # keycloakOrg:
          #   default:
          #     baseUrl: https://{{ keycloak_host }}
          #     realm: {{ keycloak_realm }}
          #     loginRealm: {{ keycloak_login_realm }}
          #     clientId: {{ keycloak_client_id }}
          #     clientSecret: {{ keycloak_client_secret }}
          #     schedule:
          #       frequency: { minutes: 2 }
          #       timeout: { minutes: 1 }
          #       initialDelay: { seconds: 15 }
          ## --- KEYCLOAK_CATALOG_PROVIDERS ---

      ## --- TECHDOCS_CONFIG ---
      # techdocs:
      #   builder: 'local'
      #   publisher:
      #     type: 'local'
      #   generator:
      #     runIn: local
      ## --- TECHDOCS_CONFIG ---
      argocd:
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: main
                url: https://{{ argocd_host }}
                username: admin
                password: ${ARGOCD_PASSWORD}
      kubernetes:
        serviceLocatorMethod:
          type: multiTenant
        clusterLocatorMethods:
          - clusters:
              - name: dev-cluster
                url: {{ kubernetes_api_url }}
                authProvider: serviceAccount
                skipTLSVerify: true
                serviceAccountToken: ${KUBERNETES_SA_TOKEN}
            type: config
        customResources:
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'pipelineruns'
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'taskruns'
      ## --- RBAC --- #
      # permission:
      #   enabled: true
      #   rbac:
      #     admin:
      #       users:
      #         - name: user:default/pe1
      #         - name: user:default/pe2
      #     policies-csv-file: ./rbac/rbac-policy.csv
      #     conditionalPoliciesFile: ./rbac/rbac-conditional-policies.yaml
      ## --- RBAC --- #

    extraEnvVars:
      - name: NODE_OPTIONS
        value: --no-node-snapshot
      - name: BACKEND_SECRET
        value: {{ backstage_backend_secret }}
      - name: NODE_TLS_REJECT_UNAUTHORIZED
        value: "0"
    ## --- RBAC --- #
    # extraVolumeMounts:
    #   - name: dynamic-plugins-root
    #     mountPath: /opt/app-root/src/dynamic-plugins-root
    #   - name: audit-log-data
    #     mountPath: /var/log/audit
    #   - name: rbac-policy
    #     mountPath: opt/app-root/src/rbac
    # extraVolumes:
    #   - name: dynamic-plugins-root
    #     persistentVolumeClaim:
    #       claimName: '{{ '{{ printf "%s-dynamic-plugins-root" .Release.Name }}' }}'
    #   - name: audit-log-data
    #     persistentVolumeClaim:
    #       claimName: '{{ '{{ printf "%s-audit-log" .Release.Name }}' }}'
    #   - name: dynamic-plugins
    #     configMap:
    #       defaultMode: 420
    #       name: '{{ '{{ printf "%s-dynamic-plugins" .Release.Name }}' }}'
    #       optional: true
    #   - name: dynamic-plugins-npmrc
    #     secret:
    #       defaultMode: 420
    #       optional: true
    #       secretName: '{{ '{{ printf "%s-dynamic-plugins-npmrc" .Release.Name }}' }}'
    #   - name: dynamic-plugins-registry-auth
    #     secret:
    #       defaultMode: 416
    #       optional: true
    #       secretName: '{{ '{{ printf "%s-dynamic-plugins-registry-auth" .Release.Name }}' }}'
    #   - name: npmcacache
    #     emptyDir: {}
    #   - name: rbac-policy
    #     configMap:
    #       name: rbac-policy
    #       defaultMode: 420
    ## --- RBAC --- #

  service:
    ports:
      backend: 7007
      targetPort: backend
  ## --- MONITORING ---
  # metrics:
  #   serviceMonitor:
  #     enabled: true
  #     path: /metrics
  ## --- MONITORING ---      

route:
  host: {{ backstage_host }}
