global:
  clusterRouterBase: {{ cluster_subdomain }}
  host: {{ backstage_host }}
  dynamic:
    includes:
      - dynamic-plugins.default.yaml
    plugins:
      - package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-gitlab-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-argocd-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-topology
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-tekton
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-argo-cd-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-redhat-argocd
        disabled: false
      - package: ./dynamic-plugins/dist/janus-idp-backstage-plugin-keycloak-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-techdocs-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-techdocs
        disabled: false
upstream:
  postgresql:
    auth:
      username: postgres
      database: backstage
      existingSecret: backstage-postgresql
      secretKeys:
        userPasswordKey: postgres-password
  backstage:
    extraEnvVarsSecrets:
      - gitlab-token
      - argocd-password
      - kubernetes-sa-token
      - oauth-client
    appConfig:
      # ============ AUTHENTICATION ============ #
      # This is a development and testing authentication configuration
      auth:
        providers:
          guest:
            dangerouslyAllowOutsideDevelopment: true
      # Configuration required to enable OpenID Connect authentication
      # auth:
      #   session:
      #     secret: ${BACKEND_SECRET}
      #   environment: production
      #   providers:
      #     oidc:
      #       production:
      #         prompt: auto
      #         metadataUrl: https://{{ keycloak_host }}/realms/{{ keycloak_realm }}/.well-known/openid-configuration
      #         clientId: ${OAUTH_CLIENT_ID}
      #         clientSecret: ${OAUTH_CLIENT_SECRET}
      #         signIn:
      #           resolvers:
      #             - resolver: preferredUsernameMatchingUserEntityName
      # signInPage: oidc
      # ============ AUTHENTICATION ============ #
      integrations:
        gitlab:
          - apiBaseUrl: https://{{ gitlab_host }}/api/v4
            baseUrl: https://{{ gitlab_host }}
            host: {{ gitlab_host }}
            token: ${GITLAB_TOKEN}          
      catalog:
        rules:
          - allow: [Component, System, API, Resource, Location, Template, Domain]
        locations: []
        providers:
          # ============ CATALOG PROVIDERS ============
          # keycloakOrg:
          #   default:
          #     baseUrl: https://{{ keycloak_host }}
          #     realm: {{ keycloak_realm }}
          #     loginRealm: {{ keycloak_login_realm }}
          #     clientId: {{ keycloak_client_id }}
          #     clientSecret: {{ keycloak_client_secret }}
          #     schedule:
          #       frequency: { minutes: 2 }
          #       timeout: { minutes: 1 }
          #       initialDelay: { seconds: 15 }
          # ============ CATALOG PROVIDERS ============
      techdocs:
        builder: 'local'
        publisher:
          type: 'local'
        generator:
          runIn: local
      argocd:
        appLocatorMethods:
          - type: 'config'
            instances:
              - name: main
                url: https://{{ argocd_host }}
                username: admin
                password: ${ARGOCD_PASSWORD}
      kubernetes:
        serviceLocatorMethod:
          type: multiTenant
        clusterLocatorMethods:
          - clusters:
              - name: dev-cluster
                url: {{ kubernetes_api_url }}
                authProvider: serviceAccount
                skipTLSVerify: true
                serviceAccountToken: ${KUBERNETES_SA_TOKEN}
            type: config
        customResources:
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'pipelineruns'
          - group: 'tekton.dev'
            apiVersion: 'v1beta1'
            plural: 'taskruns'
    extraEnvVars:
      - name: NODE_OPTIONS
        value: --no-node-snapshot
      - name: BACKEND_SECRET
        value: {{ backstage_backend_secret }}
      - name: NODE_TLS_REJECT_UNAUTHORIZED
        value: "0"
  service:
    ports:
      backend: 7007
      targetPort: backend
route:
  host: {{ backstage_host }}
